---
import MainNav from '../components/MainNav.astro';
import Footer from '../components/Footer.astro';
import type { Locale } from '../data/navigation';
import type { SeoInput } from '../utils/seo';
import { buildSeoTags } from '../utils/seo';
import { withBase } from '../utils/paths';
import { resolvePublicAsset } from '../utils/publicAssets';
import '../styles/tokens.css';
import '../styles/base.css';

interface Props {
  lang?: Locale;
  seo: SeoInput;
  navClass?: string;
  navTopClass?: string;
}

const {
  lang = 'cs',
  seo,
  navClass = '',
  navTopClass = '',
}: Props = Astro.props;

const seoTags = seo ? buildSeoTags(lang, seo) : null;
const shouldRegisterSw = import.meta.env.PROD;

const serviceWorkerPath = resolvePublicAsset(
  new URL('../../public/sw.js', import.meta.url),
);
const serviceWorkerScope = withBase();
const appleTouchIcon = resolvePublicAsset(
  new URL('../../public/apple-touch-icon.png', import.meta.url),
);
const favicon32 = resolvePublicAsset(
  new URL('../../public/favicon-32x32.png', import.meta.url),
);
const favicon16 = resolvePublicAsset(
  new URL('../../public/favicon-16x16.png', import.meta.url),
);
const siteManifest = resolvePublicAsset(
  new URL('../../public/site.webmanifest', import.meta.url),
);
const safariPinnedTab = resolvePublicAsset(
  new URL('../../public/safari-pinned-tab.svg', import.meta.url),
);

const backgrounds = {
  selectArrow: resolvePublicAsset(
    new URL('../../public/assets/img/icons/down-arrow.svg', import.meta.url),
  ),
  heroBanner: resolvePublicAsset(
    new URL('../../public/assets/img/hero/hero-bg-shap-3a.svg', import.meta.url),
  ),
  featureShape: resolvePublicAsset(
    new URL('../../public/sluzby/img/shape/topograph-1c.svg', import.meta.url),
  ),
  authorQuote: resolvePublicAsset(
    new URL('../../public/assets/img/icon/icon-45.svg', import.meta.url),
  ),
  projectInfo: resolvePublicAsset(
    new URL('../../public/assets/img/work/big-img-01.jpg', import.meta.url),
  ),
  videoPrimary: resolvePublicAsset(
    new URL('../../public/assets/img/video/video-1b.jpg', import.meta.url),
  ),
  videoSecondary: resolvePublicAsset(
    new URL('../../public/assets/img/video/video-2d.jpg', import.meta.url),
  ),
  priceBackground: resolvePublicAsset(
    new URL('../../public/img/bg/price-bg-1c.svg', import.meta.url),
  ),
  planShape: resolvePublicAsset(
    new URL('../../public/sluzby/img/shape/topograph-2c.svg', import.meta.url),
  ),
  errorSpiral: resolvePublicAsset(
    new URL('../../public/sluzby/img/shape/spiral-1e.svg', import.meta.url),
  ),
};
const bootstrapCss = resolvePublicAsset(
  new URL('../../public/assets/css/bootstrap.min.css', import.meta.url),
);
const fontAwesomeCss = resolvePublicAsset(
  new URL('../../public/assets/css/font-awesome-pro.min.css', import.meta.url),
);
const flaticonCss = resolvePublicAsset(
  new URL('../../public/assets/css/flaticon_gerold.css', import.meta.url),
);
const allCss = resolvePublicAsset(
  new URL('../../public/assets/css/all.min.css', import.meta.url),
);
const bootstrapIconsCss = resolvePublicAsset(
  new URL('../../public/assets/fonts/bootstrap-icons/font-css.css', import.meta.url),
);
const clashDisplayCss = resolvePublicAsset(
  new URL('../../public/assets/fonts/custom-font/css/clash-display.css', import.meta.url),
);
const backgroundStyles = `
  .tj-nice-select::after {
    background-image: url("${backgrounds.selectArrow}");
  }

  .theme-banner-three::before {
    background-image: url("${backgrounds.heroBanner}");
  }

  .feature-style-five::before {
    background-image: url("${backgrounds.featureShape}");
  }

  .author-blockquote::before {
    background-image: url("${backgrounds.authorQuote}");
  }

  .project-info {
    background-image: url("${backgrounds.projectInfo}");
  }

  .video-wrapper {
    background-image: url("${backgrounds.videoPrimary}");
  }

  .techy-video {
    background-image: url("${backgrounds.videoSecondary}");
  }

  .bg-wrapper-one {
    background-image: url("${backgrounds.priceBackground}");
  }

  .plan::before {
    background-image: url("${backgrounds.planShape}");
  }

  .error-page-bg {
    background-image: url("${backgrounds.errorSpiral}");
  }
`;
---

<!DOCTYPE html>
<html lang={lang} class="no-js">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="msapplication-TileColor" content="#9f00a7" />
    <meta name="theme-color" content="#ffffff" />
    <link rel="apple-touch-icon" sizes="180x180" href={appleTouchIcon} />
    <link rel="icon" type="image/png" sizes="32x32" href={favicon32} />
    <link rel="icon" type="image/png" sizes="16x16" href={favicon16} />
    <link rel="manifest" href={siteManifest} />
    <link rel="mask-icon" href={safariPinnedTab} color="#5bbad5" />
    <link rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Sora:wght@300;400;500;700&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Russo+One&display=swap"
    />
    <link rel="stylesheet" href={bootstrapCss} />
    <link rel="stylesheet" href={fontAwesomeCss} />
    <link rel="stylesheet" href={flaticonCss} />
    <link rel="stylesheet" href={allCss} />
    <link rel="stylesheet" href={bootstrapIconsCss} />
    <link rel="stylesheet" href={clashDisplayCss} />
    <style is:inline set:html={backgroundStyles} />
    {seoTags && (
      <>
        <title>{seoTags.title}</title>
        {seoTags.links.map((link) => (
          <link
            rel={link.rel}
            href={link.href}
            {...(link.hreflang ? { hreflang: link.hreflang } : {})}
          />
        ))}
        {seoTags.meta.map((meta) =>
          meta.name ? (
            <meta name={meta.name} content={meta.content} />
          ) : (
            <meta property={meta.property!} content={meta.content} />
          )
        )}
      </>
    )}
    <slot name="head" />
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-92X11QBKZL"></script>
    <script>
      {`window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);} 
gtag('js', new Date());
gtag('config', 'G-92X11QBKZL');`}
    </script>
  </head>
  <body>
    <div class="main-page-wrapper">
      <MainNav
        lang={lang}
        headerClass={navClass || undefined}
        topHeaderClass={navTopClass || undefined}
      >
        <slot slot="desktop-cta" name="nav-desktop-cta" />
        <slot slot="mobile-cta" name="nav-mobile-cta" />
      </MainNav>
      <slot />
      <Footer lang={lang}>
        <slot slot="cta" name="footer-cta" />
      </Footer>
    </div>
    <slot name="after-content" />
    <script type="module" is:inline>
      const loadContactForms = async () => {
        if (!document.querySelector('form[data-contact-form]')) {
          return;
        }

        try {
          const [{ initContactForms }] = await Promise.all([
            import('../scripts/contact-form.ts'),
          ]);
          initContactForms();
        } catch (error) {
          console.error('Failed to initialise contact forms', error);
        }
      };

      const scheduleContactForms = () => {
        if ('requestIdleCallback' in window) {
          window.requestIdleCallback(loadContactForms, { timeout: 2000 });
        } else {
          window.addEventListener('load', loadContactForms, { once: true });
        }
      };

      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        scheduleContactForms();
      } else {
        document.addEventListener('DOMContentLoaded', scheduleContactForms, { once: true });
      }
    </script>
    {shouldRegisterSw && (
      <script>
        {`if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker
      .register('${serviceWorkerPath}', { scope: '${serviceWorkerScope}' })
      .catch((error) => {
        console.error('Service worker registration failed', error);
      });
  });
}`}
      </script>
    )}
  </body>
</html>
