---
import { resolvePublicAsset } from '../utils/publicAssets';

type MaybeUrl = string | URL;

export interface ResponsiveSource {
  srcset: MaybeUrl;
  type?: string;
  media?: string;
  sizes?: string;
}

export interface ResponsiveImageProps {
  alt: string;
  src: MaybeUrl;
  width: number;
  height: number;
  sources?: ResponsiveSource[];
  srcset?: MaybeUrl;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'auto' | 'sync';
  pictureClass?: string;
  class?: string;
  style?: string;
  [key: string]: unknown;
}

const {
  alt,
  src,
  width,
  height,
  sources = [],
  srcset,
  sizes,
  loading = 'lazy',
  decoding: decodingProp,
  pictureClass,
  class: imgClass,
  style,
  ...rest
} = Astro.props as ResponsiveImageProps;

const decoding = decodingProp ?? (loading === 'eager' ? 'sync' : 'async');
const resolveAsset = (value: MaybeUrl | undefined) =>
  value instanceof URL ? resolvePublicAsset(value) : value;
const resolvedSrc = resolveAsset(src);
const resolvedSrcset = resolveAsset(srcset);
---
<picture class={pictureClass}>
{sources.map((source) => (
  <source
    type={source.type}
    srcset={resolveAsset(source.srcset)!}
    media={source.media}
    sizes={source.sizes ?? sizes}
  />
))}
  <img
    src={resolvedSrc!}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    srcset={resolvedSrcset}
    sizes={sizes}
    class={imgClass}
    style={style}
    {...rest}
  />
</picture>
